name: Build KernelSU-Next + SUSFS for Pixel 4XL

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout kernel source
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: false

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y bc bison build-essential curl flex git gnupg gperf libncurses5-dev libsdl1.2-dev libxml2 libxml2-utils lzop pngcrush schedtool squashfs-tools xsltproc zip zlib1g-dev gcc-multilib g++-multilib libelf-dev python3 python3-pip
          sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu

      - name: Setup toolchain
        run: |
          echo "=== DOWNLOADING ANDROID TOOLCHAIN ==="
          # –°–∫–∞—á–∏–≤–∞–µ–º NDK r23b
          curl -LO "https://dl.google.com/android/repository/android-ndk-r23b-linux.zip"
          unzip -q android-ndk-r23b-linux.zip
          
          # Toolchain –ø—É—Ç—å
          TOOLCHAIN_DIR="$PWD/android-ndk-r23b/toolchains/llvm/prebuilt/linux-x86_64/bin"
          
          # –°–æ–∑–¥–∞—ë–º —Å–∏–º–≤–æ–ª–∏—á–µ—Å–∫–∏–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
          ln -sf $TOOLCHAIN_DIR/aarch64-linux-android21-clang $TOOLCHAIN_DIR/aarch64-linux-android-gcc
          ln -sf $TOOLCHAIN_DIR/aarch64-linux-android21-clang++ $TOOLCHAIN_DIR/aarch64-linux-android-g++
          ln -sf $TOOLCHAIN_DIR/aarch64-linux-android21-clang $TOOLCHAIN_DIR/aarch64-linux-android-ld
          ln -sf $TOOLCHAIN_DIR/aarch64-linux-android21-clang $TOOLCHAIN_DIR/aarch64-linux-android-ar
          
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º
          echo "=== TOOLCHAIN VERIFICATION ==="
          ls -la $TOOLCHAIN_DIR/aarch64-linux-android* | head -5
          $TOOLCHAIN_DIR/aarch64-linux-android-gcc --version | head -1
          $TOOLCHAIN_DIR/aarch64-linux-android-ld --version | head -1 || echo "LD version check failed"
          
          # –î–æ–±–∞–≤–ª—è–µ–º –≤ PATH
          echo "$TOOLCHAIN_DIR" >> $GITHUB_PATH
          echo "PATH=$PATH" >> $GITHUB_ENV

      - name: Find correct defconfig
        run: |
          echo "=== FINDING CORRECT DEFCONFIG FOR PIXEL 4XL (coral) ==="
          
          # –ò—â–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ defconfig –¥–ª—è Pixel 4/4XL
          echo "=== SEARCHING FOR PIXEL DEFCONFIGS ==="
          find . -path "*/configs/*coral*" -name "*.defconfig" -type f || echo "No coral defconfigs found"
          find . -path "*/configs/*flame*" -name "*.defconfig" -type f || echo "No flame defconfigs found"
          find . -path "*/configs/*pixel*" -name "*.defconfig" -type f || echo "No pixel defconfigs found"
          
          # –ò—â–µ–º –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö
          echo "=== STANDARD CONFIG SEARCH ==="
          ls -la arch/arm64/configs/ 2>/dev/null | head -10 || echo "No arch/arm64/configs found"
          find arch/ -name "*coral*" -type f 2>/dev/null | head -5 || echo "No coral files found"
          
          # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ defconfig –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
          echo "=== ALL DEFCONFIGS IN REPO ==="
          find . -name "*defconfig" | head -20
          
          # –°–æ–∑–¥–∞—ë–º —Å–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
          echo "=== POSSIBLE CANDIDATES FOR PIXEL 4XL ==="
          CANDIDATES=$(find . -path "*/configs/*" -name "*defconfig" | grep -E "(coral|flame|pixel|msm|qcom)" | head -5)
          echo "$CANDIDATES"
          
          if [ -n "$CANDIDATES" ]; then
            echo "‚úì Found candidate configs - will try first one"
            FIRST_CONFIG=$(echo "$CANDIDATES" | head -1 | xargs basename)
            echo "Will try: $FIRST_CONFIG"
            echo "DEFCONFIG=$FIRST_CONFIG" >> $GITHUB_ENV
          else
            echo "‚ùå No suitable defconfig found - using generic"
            echo "DEFCONFIG=defconfig" >> $GITHUB_ENV
          fi

      - name: Clean and prepare kernel source
        run: |
          rm -rf KernelSU
          rm -f .gitmodules
          git config --unset-all submodule.KernelSU.url || true
          git checkout -- fs/notify/fdinfo.c || true
          echo "=== Git status after cleanup ==="
          git status --short

      - name: Integrate KernelSU-Next v1.1.0
        run: |
          curl -LSs "https://raw.githubusercontent.com/KernelSU-Next/KernelSU-Next/v1.1.0/kernel/setup.sh" | bash -s v1.1.0
          echo "=== Git status after KSU integration ==="
          git status --short

      - name: Integrate SUSFS patches
        run: |
          echo "=== INTEGRATING SUSFS ==="
          git clone https://gitlab.com/simonpunk/susfs4ksu.git
          cd susfs4ksu && git checkout kernel-4.14 && cd ..
          
          sed 's/[[:space:]]*$//' susfs4ksu/kernel_patches/50_add_susfs_in_kernel-4.14.patch > cleaned.patch
          git apply --reject --ignore-whitespace cleaned.patch || echo "SUSFS patch applied with warnings"
          
          # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–∞–≤–∫–∞ fdinfo.c
          if [ -f "fs/notify/fdinfo.c.rej" ]; then
            sed -i '/inotify_mark_user_mask/a\
          } else if (mark->type == FSNOTIFY_MARK_TYPE_SUSFS) {\
            struct susfs_mark *susfs_mark = container_of(mark, struct susfs_mark, fsn_mark);\
            seq_printf(m, "susfs wd:%x ino:%lx sdev:%x mask:%x ",\
                       susfs_mark->wd, mark->i_ino, mark->i_sb->s_dev, susfs_mark->mask);\
          }' fs/notify/fdinfo.c
            rm -f fs/notify/fdinfo.c.rej
          fi
          
          rm -f cleaned.patch
          echo "=== SUSFS INTEGRATION COMPLETE ==="
          git status --short | head -10

      - name: Prepare config
        run: |
          echo "=== PREPARING KERNEL CONFIG ==="
          echo "Using DEFCONFIG: $DEFCONFIG"
          
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º toolchain
          echo "=== TOOLCHAIN STATUS ==="
          which aarch64-linux-android-gcc && aarch64-linux-android-gcc --version | head -1 || echo "‚ùå Toolchain not available"
          which aarch64-linux-android-ld && aarch64-linux-android-ld --version | head -1 || echo "‚ùå Linker not available"
          
          # –°–æ–∑–¥–∞—ë–º out –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
          mkdir -p out
          
          # –ü—Ä–∏–º–µ–Ω—è–µ–º defconfig (—Ç–æ–ª—å–∫–æ –∏–º—è —Ñ–∞–π–ª–∞, –±–µ–∑ –ø—É—Ç–∏)
          echo "=== APPLYING DEFCONFIG: $DEFCONFIG ==="
          DEFCONFIG_NAME=$(basename "$DEFCONFIG")
          echo "Defconfig name: $DEFCONFIG_NAME"
          
          # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
          if make O=out ARCH=arm64 CROSS_COMPILE=aarch64-linux-android- $DEFCONFIG_NAME; then
            echo "‚úì Defconfig $DEFCONFIG_NAME applied successfully"
          elif make O=out ARCH=arm64 CROSS_COMPILE=aarch64-linux-android- defconfig; then
            echo "‚úì Fallback to generic defconfig"
            DEFCONFIG_NAME="defconfig"
          else
            echo "‚ùå All defconfig attempts failed"
            exit 1
          fi
          
          # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã
          echo "=== RESOLVING CONFIG CONFLICTS ==="
          yes "" | make O=out ARCH=arm64 CROSS_COMPILE=aarch64-linux-android- oldconfig
          
          # –í–∫–ª—é—á–∞–µ–º KSU –∏ SUSFS
          echo "=== ENABLING ROOT AND MODULES ==="
          sed -i 's/# CONFIG_KSU is not set/CONFIG_KSU=y/' out/.config || echo "KSU config not found"
          sed -i 's/# CONFIG_SUSFS is not set/CONFIG_SUSFS=y/' out/.config || echo "SUSFS config not found"
          sed -i 's/# CONFIG_KPROBES is not set/CONFIG_KPROBES=y/' out/.config || echo "KPROBES config not found"
          sed -i 's/# CONFIG_MODULES is not set/CONFIG_MODULES=y/' out/.config || echo "MODULES config not found"
          
          # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ config
          echo "=== CONFIG VERIFICATION ==="
          grep -E "(CONFIG_KSU|CONFIG_SUSFS|CONFIG_KPROBES|CONFIG_MODULES)" out/.config || echo "‚ö†Ô∏è Root/module configs missing"
          wc -l out/.config
          
          # –°–æ—Ö—Ä–∞–Ω—è–µ–º config
          make O=out ARCH=arm64 CROSS_COMPILE=aarch64-linux-android- savedefconfig
          echo "‚úì Config preparation complete"

      - name: Build kernel
        run: |
          echo "=== STARTING KERNEL COMPILATION ==="
          
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ
          echo "=== ENVIRONMENT ==="
          echo "PATH contains toolchain: $(echo $PATH | grep -o 'android-ndk' || echo 'NO')"
          which aarch64-linux-android-gcc && echo "‚úì GCC: $(which aarch64-linux-android-gcc)" || echo "‚ùå GCC missing"
          which aarch64-linux-android-ld && echo "‚úì LD: $(which aarch64-linux-android-ld)" || echo "‚ùå LD missing"
          
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º config
          if [ ! -f "out/.config" ]; then
            echo "‚ùå No .config file - cannot build"
            exit 1
          fi
          echo "‚úì Config: $(du -h out/.config)"
          
          # –ö–æ–º–ø–∏–ª–∏—Ä—É–µ–º —è–¥—Ä–æ (30 –º–∏–Ω —Ç–∞–π–º–∞—É—Ç)
          echo "=== COMPILING (this will take 10-20 minutes) ==="
          timeout 1800 make O=out ARCH=arm64 CROSS_COMPILE=aarch64-linux-android- -j$(nproc) Image.gz-dtb || {
            echo "=== BUILD TIMEOUT - checking if kernel was created ==="
            if [ -f "out/arch/arm64/boot/Image.gz-dtb" ]; then
              echo "‚úì Kernel built despite timeout!"
            else
              echo "=== BUILD FAILURE DEBUG ==="
              make O=out ARCH=arm64 CROSS_COMPILE=aarch64-linux-android- V=1 2>&1 | head -30 || echo "No debug info"
              exit 1
            fi
          }
          
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
          if [ -f "out/arch/arm64/boot/Image.gz-dtb" ]; then
            echo "üéâ KERNEL BUILD SUCCESSFUL!"
            echo "‚úì Image size: $(du -h out/arch/arm64/boot/Image.gz-dtb)"
            ls -la out/arch/arm64/boot/
          else
            echo "‚ùå NO KERNEL IMAGE CREATED"
            echo "=== SEARCHING FOR OUTPUT FILES ==="
            find out/ -name "Image*" -o -name "*.dtb" 2>/dev/null | head -5 || echo "Nothing found"
            exit 1
          fi

      - name: Package kernel
        run: |
          echo "=== CREATING FLASHABLE ZIP ==="
          if [ ! -f "out/arch/arm64/boot/Image.gz-dtb" ]; then
            echo "‚ùå No kernel to package"
            exit 1
          fi
          
          git clone --depth=1 https://github.com/osm0sis/AnyKernel3
          cp out/arch/arm64/boot/Image.gz-dtb AnyKernel3/
          cd AnyKernel3
          
          # Pixel 4XL –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
          sed -i 's/#device.name1=/device.name1=coral/' anykernel.sh
          sed -i 's/#isize=/isize=3072/' anykernel.sh
          sed -i 's/#do.devicecheck=1/do.devicecheck=1/' anykernel.sh
          sed -i 's/#do.modules=0/do.modules=0/' anykernel.sh
          sed -i 's/#do.cleanup=1/do.cleanup=1/' anykernel.sh
          sed -i 's/kernel.string=/kernel.string=KernelSU-Next v1.1.0 + SUSFS/' anykernel.sh
          
          # ZIP —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π
          ZIP_NAME="../Pixel4XL-KernelSU-v1.1.0-SUSFS-$(date +%Y%m%d-%H%M%S).zip"
          zip -r4 $ZIP_NAME * -x .git README.md
          cd ..
          
          echo "=== ZIP CREATED ==="
          ls -la Pixel4XL-KernelSU-v1.1.0-SUSFS-*.zip

      - name: Upload flashable ZIP
        uses: actions/upload-artifact@v4
        with:
          name: Pixel4XL-KernelSU-Next-v1.1.0-Flashable
          path: Pixel4XL-KernelSU-v1.1.0-SUSFS-*.zip
          retention-days: 30

      - name: Build summary
        run: |
          echo "=============================================="
          echo "üèÜ KERNEL BUILD STATUS"
          echo "=============================================="
          if [ -f "out/arch/arm64/boot/Image.gz-dtb" ]; then
            echo "‚úÖ SUCCESS - Kernel ready for flashing!"
            echo "   ‚Ä¢ KernelSU-Next: v1.1.0 ‚úì"
            echo "   ‚Ä¢ SUSFS: Integrated ‚úì"
            echo "   ‚Ä¢ Kernel Image: $(du -h out/arch/arm64/boot/Image.gz-dtb)"
            echo "   ‚Ä¢ Flashable ZIP: $(ls -la Pixel4XL-KernelSU-v1.1.0-SUSFS-*.zip)"
            echo ""
            echo "üî• FLASH INSTRUCTIONS:"
            echo "1. Download ZIP from Artifacts (top of page)"
            echo "2. Boot to fastboot: adb reboot bootloader"
            echo "3. Extract boot.img: unzip -p *.zip boot.img > boot.img"
            echo "4. Flash: fastboot flash boot boot.img"
            echo "5. Reboot: fastboot reboot"
            echo "6. Install KernelSU Manager APK from GitHub"
            echo "7. Open app ‚Üí should show KernelSU v1.1.0"
            echo ""
            echo "‚ö†Ô∏è  If bootloop occurs: fastboot flash boot stock_boot.img"
            echo "   Then try flashing again or check USB connection"
          else
            echo "‚ùå BUILD FAILED"
            echo "   Check logs above for specific errors"
            echo "   Common issues: missing defconfig, toolchain problems"
          fi
          echo "=============================================="
