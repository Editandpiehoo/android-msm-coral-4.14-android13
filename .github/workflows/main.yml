name: Build KernelSU-Next + SUSFS for Pixel 4XL

on:
  workflow_dispatch:  # Запуск вручную через Actions tab

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout kernel source
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Полный гит-история для патчей
          submodules: false  # Отключаем автоматическое обновление submodules

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y bc bison build-essential curl flex git gnupg gperf libncurses5-dev libsdl1.2-dev libxml2 libxml2-utils lzop pngcrush schedtool squashfs-tools xsltproc zip zlib1g-dev gcc-multilib g++-multilib libelf-dev python3 python3-pip
          sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu

      - name: Download Android toolchain
        run: |
          git clone --depth=1 https://android.googlesource.com/platform/prebuilts/gcc/linux-x86/aarch64/aarch64-linux-android-4.9
          export PATH=$PATH:$(pwd)/aarch64-linux-android-4.9/bin
          export CROSS_COMPILE=aarch64-linux-android-
          export CROSS_COMPILE_ARM32=arm-linux-androideabi-
          export ARCH=arm64
          export SUBARCH=arm64

      - name: Clean and prepare kernel source
        run: |
          # Удаляем старую интеграцию KSU
          rm -rf KernelSU
          # Удаляем submodule ссылки
          rm -f .gitmodules
          git config --unset-all submodule.KernelSU.url || true
          # Возвращаем проблемный файл к оригинальному состоянию
          git checkout -- fs/notify/fdinfo.c || true
          echo "=== Git status after cleanup ==="
          git status --short

      - name: Integrate KernelSU-Next v1.1.0
        run: |
          curl -LSs "https://raw.githubusercontent.com/KernelSU-Next/KernelSU-Next/v1.1.0/kernel/setup.sh" | bash -s v1.1.0
          echo "=== Git status after KSU integration ==="
          git status --short

      - name: Integrate SUSFS patches with manual fix
        run: |
          git clone https://gitlab.com/simonpunk/susfs4ksu.git
          cd susfs4ksu
          git checkout kernel-4.14
          cd ..
          
          # Очищаем trailing whitespace из патча
          sed 's/[[:space:]]*$//' susfs4ksu/kernel_patches/50_add_susfs_in_kernel-4.14.patch > cleaned_susfs.patch
          
          # Применяем патч с reject файлами
          git apply --reject --ignore-whitespace cleaned_susfs.patch
          
          # НАДЁЖНАЯ РУЧНАЯ ПРАВКА fdinfo.c
          echo "=== APPLYING MANUAL SUSFS FIX TO fdinfo.c ==="
          
          # Создаём backup оригинального файла
          cp fs/notify/fdinfo.c fs/notify/fdinfo.c.backup
          
          # Читаем оригинальный файл и ищем inotify секцию
          if grep -q "inotify_mark_user_mask(mark)" fs/notify/fdinfo.c; then
            echo "✓ Found inotify section, applying SUSFS integration..."
            
            # Создаём исправленный файл - копируем до inotify секции, добавляем SUSFS, копируем остальное
            awk '
            BEGIN { in_susfs_section = 0 }
            /seq_printf\(m, "inotify wd:%x ino:%lx sdev:%x mask:%x/ {
              # Печатаем inotify секцию
              print $0
              getline  # Пропускаем следующую строку с inotify_mark_user_mask
              print $0
              # Добавляем SUSFS секцию
              print "			} else if (mark->type == FSNOTIFY_MARK_TYPE_SUSFS) {"
              print "				struct susfs_mark *susfs_mark;"
              print "				susfs_mark = container_of(mark, struct susfs_mark, fsn_mark);"
              print "				seq_printf(m, \"susfs wd:%x ino:%lx sdev:%x mask:%x\","
              print "					   susfs_mark->wd, mark->inode->i_ino, mark->inode->i_sb->s_dev,"
              print "					   susfs_mark->mask);"
              in_susfs_section = 1
              next
            }
            in_susfs_section == 1 && /;/ { 
              # Закрываем SUSFS секцию после первой точки с запятой
              print "			}"
              in_susfs_section = 0
              print $0
              next 
            }
            in_susfs_section == 0 { print }  # Печатаем всё остальное до SUSFS секции
            ' fs/notify/fdinfo.c > fs/notify/fdinfo_fixed.c
            
            # Проверяем результат
            if grep -q "susfs wd:%x" fs/notify/fdinfo_fixed.c; then
              mv fs/notify/fdinfo_fixed.c fs/notify/fdinfo.c
              echo "✓ SUSFS integration successfully added to fdinfo.c"
            else
              echo "✗ SUSFS integration failed, restoring backup and showing error:"
              mv fs/notify/fdinfo.c.backup fs/notify/fdinfo.c
              echo "=== FAILED FIXED FILE ==="
              cat fs/notify/fdinfo_fixed.c
              exit 1
            fi
          else
            echo "✗ Could not find inotify section for SUSFS integration"
            echo "=== CURRENT fdinfo.c inotify search ==="
            grep -n "inotify\|seq_printf.*wd:" fs/notify/fdinfo.c || echo "No inotify code found"
            exit 1
          fi
          
          # Удаляем временные файлы
          rm -f fs/notify/fdinfo.c.rej cleaned_susfs.patch fs/notify/fdinfo_fixed.c
          
          # Финальная проверка
          echo "=== VERIFICATION: SUSFS INTEGRATION CHECK ==="
          if grep -q "susfs wd:%x" fs/notify/fdinfo.c; then
            echo "✓ SUSFS code successfully integrated"
            echo "=== RELEVANT LINES FROM fdinfo.c ==="
            sed -n '/susfs wd:/,/}/p' fs/notify/fdinfo.c
          else
            echo "✗ SUSFS code NOT found in final file"
            echo "=== FINAL FILE CHECK ==="
            grep -n "inotify\|susfs" fs/notify/fdinfo.c || echo "No SUSFS or inotify code found"
            exit 1
          fi

      - name: Prepare config
        run: |
          make O=out coral_defconfig
          # Включаем KSU и SUSFS
          sed -i 's/# CONFIG_KSU is not set/CONFIG_KSU=y/' out/.config || true
          sed -i 's/# CONFIG_SUSFS is not set/CONFIG_SUSFS=y/' out/.config || true
          sed -i 's/# CONFIG_KPROBES is not set/CONFIG_KPROBES=y/' out/.config || true
          sed -i 's/# CONFIG_KPROBE_EVENTS is not set/CONFIG_KPROBE_EVENTS=y/' out/.config || true
          
          echo "=== KERNEL CONFIG VERIFICATION ==="
          grep -E "(CONFIG_KSU|CONFIG_SUSFS|CONFIG_KPROBES|CONFIG_KPROBE_EVENTS)" out/.config || echo "Some config options may be missing"

      - name: Build kernel
        run: |
          echo "=== STARTING KERNEL BUILD ==="
          make O=out -j$(nproc --all) Image.gz-dtb || {
            echo "=== BUILD FAILED - SHOWING LAST 20 LINES ==="
            tail -20 build.log || echo "No build.log found"
            exit 1
          }
          echo "=== KERNEL BUILD SUCCESSFUL ==="
          ls -la out/arch/arm64/boot/

      - name: Package with AnyKernel3
        run: |
          echo "=== PACKAGING WITH ANYKERNEL3 ==="
          git clone https://github.com/osm0sis/AnyKernel3
          cp out/arch/arm64/boot/Image.gz-dtb AnyKernel3/Image.gz-dtb
          cd AnyKernel3
          # Настройка для Pixel 4XL (coral)
          sed -i 's/#device.name1=/device.name1=coral/' anykernel.sh
          sed -i 's/#isize=/isize=3072/' anykernel.sh
          sed -i 's/#device.name2=/device.name2=coral/' anykernel.sh
          sed -i 's/#do.devicecheck=1/do.devicecheck=1/' anykernel.sh
          sed -i 's/#do.modules=0/do.modules=0/' anykernel.sh
          sed -i 's/#do.cleanup=1/do.cleanup=1/' anykernel.sh
          sed -i 's/#do.cleanuponabort=0/do.cleanuponabort=0/' anykernel.sh
          sed -i 's/kernel.string=/kernel.string=KernelSU-Next v1.1.0 + SUSFS for Pixel 4XL/' anykernel.sh
          # Создаём финальный ZIP
          zip -r4 ../AnyKernel3-KernelSU-Next-v1.1.0-SUSFS-Pixel4XL.zip * -x .git README.md
          cd ..
          echo "=== PACKAGING COMPLETE ==="
          ls -la AnyKernel3-KernelSU-Next-v1.1.0-SUSFS-Pixel4XL.zip

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: Pixel4XL-KernelSU-Next-v1.1.0-SUSFS
          path: AnyKernel3-KernelSU-Next-v1.1.0-SUSFS-Pixel4XL.zip
          retention-days: 30

      - name: Final verification
        run: |
          echo "=== BUILD SUMMARY ==="
          echo "✓ KernelSU-Next v1.1.0: Integrated"
          echo "✓ SUSFS: Integrated with manual fdinfo.c fix"
          echo "✓ Kernel built: $(ls -la out/arch/arm64/boot/Image.gz-dtb)"
          echo "✓ Package created: $(ls -la AnyKernel3-KernelSU-Next-v1.1.0-SUSFS-Pixel4XL.zip)"
          echo ""
          echo "=== INSTALLATION INSTRUCTIONS ==="
          echo "1. Download the ZIP artifact from this workflow"
          echo "2. Boot to fastboot mode on your Pixel 4XL"
          echo "3. Extract boot.img from the ZIP"
          echo "4. Flash: fastboot flash boot boot.img"
          echo "5. Reboot: fastboot reboot"
          echo "6. Install KernelSU Manager app and verify root"
