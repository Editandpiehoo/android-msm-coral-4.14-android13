name: Build KernelSU-Next + SUSFS for Pixel 4XL

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout kernel source
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: false

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y bc bison build-essential curl flex git gnupg gperf libncurses5-dev libsdl1.2-dev libxml2 libxml2-utils lzop pngcrush schedtool squashfs-tools xsltproc zip zlib1g-dev gcc-multilib g++-multilib libelf-dev python3 python3-pip
          sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu

      - name: Setup toolchain
        run: |
          echo "=== DOWNLOADING ANDROID TOOLCHAIN ==="
          curl -LO "https://dl.google.com/android/repository/android-ndk-r23b-linux.zip"
          unzip -q android-ndk-r23b-linux.zip
          
          TOOLCHAIN_DIR="$PWD/android-ndk-r23b/toolchains/llvm/prebuilt/linux-x86_64/bin"
          
          # Символические ссылки для совместимости
          ln -sf $TOOLCHAIN_DIR/aarch64-linux-android21-clang $TOOLCHAIN_DIR/aarch64-linux-android-gcc
          ln -sf $TOOLCHAIN_DIR/aarch64-linux-android21-clang++ $TOOLCHAIN_DIR/aarch64-linux-android-g++
          ln -sf $TOOLCHAIN_DIR/aarch64-linux-android21-clang $TOOLCHAIN_DIR/aarch64-linux-android-ld
          ln -sf $TOOLCHAIN_DIR/aarch64-linux-android21-clang $TOOLCHAIN_DIR/aarch64-linux-android-ar
          
          echo "=== TOOLCHAIN VERIFICATION ==="
          ls -la $TOOLCHAIN_DIR/aarch64-linux-android-* | head -5
          $TOOLCHAIN_DIR/aarch64-linux-android-gcc --version | head -1
          $TOOLCHAIN_DIR/aarch64-linux-android-ld --version | head -1
          
          echo "$TOOLCHAIN_DIR" >> $GITHUB_PATH

      - name: Patch gcc-wrapper for Python 3
        run: |
          echo "=== PATCHING GCC-WRAPPER FOR PYTHON 3 ==="
          if [ -f "scripts/gcc-wrapper.py" ]; then
            sed -i 's/print >> sys.stderr, line/print(file=sys.stderr, end=""), print(line, file=sys.stderr, end="")/g' scripts/gcc-wrapper.py
            sed -i 's/print >> sys.stderr, args[0] + '\'' : '\'' + e.strerror/print(file=sys.stderr, end=""), print(args[0] + '\'' : '\'' + e.strerror, file=sys.stderr, end="")/g' scripts/gcc-wrapper.py
            sed -i 's/print >> sys.stderr, '\'' '\''.join(args), str(e)/print(file=sys.stderr, end=""), print('\'' '\''.join(args), str(e), file=sys.stderr, end="")/g' scripts/gcc-wrapper.py
            sed -i 's/print >> sys.stderr, "error, forbidden warning:", m.group(2)/print(file=sys.stderr, end=""), print("error, forbidden warning:", m.group(2), file=sys.stderr, end="")/g' scripts/gcc-wrapper.py
            sed -i 's/line.rstrip('\''\n'\''/line.rstrip(b'\''\n'\'').decode('\''utf-8'\''/g' scripts/gcc-wrapper.py
            echo "✓ Patch applied"
            cat scripts/gcc-wrapper.py
          else
            echo "⚠️ gcc-wrapper.py not found - skipping patch"
          fi

      - name: Clean and prepare kernel source
        run: |
          rm -rf KernelSU
          rm -f .gitmodules
          git config --unset-all submodule.KernelSU.url || true
          git checkout -- fs/notify/fdinfo.c || true
          echo "=== Git status after cleanup ==="
          git status --short

      - name: Integrate KernelSU-Next v1.1.0
        run: |
          curl -LSs "https://raw.githubusercontent.com/KernelSU-Next/KernelSU-Next/v1.1.0/kernel/setup.sh" | bash -s v1.1.0
          echo "=== Git status after KSU integration ==="
          git status --short
          
          # Коммитим изменения, чтобы убрать -dirty
          git add .
          git commit -m "Integrate KernelSU-Next v1.1.0" || true

      - name: Integrate SUSFS patches
        run: |
          echo "=== INTEGRATING SUSFS ==="
          git clone https://gitlab.com/simonpunk/susfs4ksu.git
          cd susfs4ksu && git checkout kernel-4.14 && cd ..
          
          sed 's/[[:space:]]*$//' susfs4ksu/kernel_patches/50_add_susfs_in_kernel-4.14.patch > cleaned.patch
          git apply --reject --ignore-whitespace cleaned.patch || echo "SUSFS patch applied with warnings"
          
          if [ -f "fs/notify/fdinfo.c.rej" ]; then
            echo "Applying manual SUSFS fix..."
            sed -i '/inotify_mark_user_mask.*mask.*);/a\
          } else if (mark->type == FSNOTIFY_MARK_TYPE_SUSFS) {\
            struct susfs_mark *susfs_mark = container_of(mark, struct susfs_mark, fsn_mark);\
            seq_printf(m, "susfs wd:%x ino:%lx sdev:%x mask:%x ",\
                       susfs_mark->wd, mark->inode->i_ino, mark->inode->i_sb->s_dev,\
                       susfs_mark->mask);\
          }' fs/notify/fdinfo.c
            rm -f fs/notify/fdinfo.c.rej
          fi
          
          rm -f cleaned.patch
          echo "=== SUSFS INTEGRATION COMPLETE ==="
          git status --short
          
          # Коммитим изменения, чтобы убрать -dirty
          git add .
          git commit -m "Integrate SUSFS" || true

      - name: Prepare config
        run: |
          echo "=== PREPARING KERNEL CONFIG ==="
          
          # Проверяем toolchain
          echo "=== TOOLCHAIN STATUS ==="
          which aarch64-linux-android-gcc && aarch64-linux-android-gcc --version | head -1
          which aarch64-linux-android-ld && aarch64-linux-android-ld --version | head -1
          
          # Создаём out директорию
          mkdir -p out
          
          # Используем sm8150_defconfig для Snapdragon 855 (Pixel 4XL)
          DEFCONFIG="sm8150_defconfig"
          echo "Using DEFCONFIG: $DEFCONFIG"
          
          # Применяем defconfig
          make O=out ARCH=arm64 CROSS_COMPILE=aarch64-linux-android- $DEFCONFIG || {
            echo "❌ sm8150_defconfig failed, trying fallback configs..."
            make O=out ARCH=arm64 CROSS_COMPILE=aarch64-linux-android- coral_defconfig || make O=out ARCH=arm64 CROSS_COMPILE=aarch64-linux-android- flame_defconfig || make O=out ARCH=arm64 CROSS_COMPILE=aarch64-linux-android- defconfig || exit 1
          }
          
          # Разрешаем все prompts
          echo "=== RESOLVING CONFIG PROMPTS ==="
          yes "" | make O=out ARCH=arm64 CROSS_COMPILE=aarch64-linux-android- oldconfig
          
          # Включаем KSU и SUSFS
          sed -i 's/# CONFIG_KSU is not set/CONFIG_KSU=y/' out/.config || true
          sed -i 's/# CONFIG_SUSFS is not set/CONFIG_SUSFS=y/' out/.config || true
          sed -i 's/# CONFIG_KPROBES is not set/CONFIG_KPROBES=y/' out/.config || true
          sed -i 's/# CONFIG_KPROBE_EVENTS is not set/CONFIG_KPROBE_EVENTS=y/' out/.config || true
          
          # Отключаем CONFIG_LOCALVERSION_AUTO, чтобы убрать git hashes
          sed -i 's/CONFIG_LOCALVERSION_AUTO=y/CONFIG_LOCALVERSION_AUTO=n/' out/.config || echo 'CONFIG_LOCALVERSION_AUTO=n' >> out/.config
          
          # Устанавливаем короткий LOCALVERSION
          sed -i 's/CONFIG_LOCALVERSION=.*/CONFIG_LOCALVERSION=""/' out/.config || echo 'CONFIG_LOCALVERSION=""' >> out/.config
          
          # Повторно разрешаем prompts после изменений
          yes "" | make O=out ARCH=arm64 CROSS_COMPILE=aarch64-linux-android- oldconfig
          
          # Финальная silentoldconfig
          make O=out ARCH=arm64 CROSS_COMPILE=aarch64-linux-android- silentoldconfig
          
          echo "=== CONFIG VERIFICATION ==="
          grep -E "(CONFIG_KSU|CONFIG_SUSFS|CONFIG_KPROBES)" out/.config || echo "⚠️ Some options missing"
          grep CONFIG_LOCALVERSION out/.config

      - name: Build kernel
        run: |
          echo "=== STARTING KERNEL BUILD ==="
          
          # Проверяем окружение
          echo "PATH: $PATH"
          which aarch64-linux-android-gcc || echo "❌ GCC missing"
          
          # Компилируем ядро
          yes "" | make O=out ARCH=arm64 CROSS_COMPILE=aarch64-linux-android- -j$(nproc --all) Image.gz-dtb || exit 1
          
          echo "=== BUILD SUCCESSFUL ==="
          ls -la out/arch/arm64/boot/

      - name: Package with AnyKernel3
        run: |
          git clone https://github.com/osm0sis/AnyKernel3
          cp out/arch/arm64/boot/Image.gz-dtb AnyKernel3/
          cd AnyKernel3
          sed -i 's/device.name1=/device.name1=coral/' anykernel.sh
          sed -i 's/kernel.string=/kernel.string=KernelSU-Next v1.1.0 + SUSFS/' anykernel.sh
          zip -r ../AnyKernel3-KSU-SUSFS.zip *
          cd ..

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: kernel-zip
          path: AnyKernel3-KSU-SUSFS.zip
``````yaml
name: Build KernelSU-Next + SUSFS for Pixel 4XL

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout kernel source
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: false

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y bc bison build-essential curl flex git gnupg gperf libncurses5-dev libsdl1.2-dev libxml2 libxml2-utils lzop pngcrush schedtool squashfs-tools xsltproc zip zlib1g-dev gcc-multilib g++-multilib libelf-dev python3 python3-pip
          sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu

      - name: Setup toolchain
        run: |
          echo "=== DOWNLOADING ANDROID TOOLCHAIN ==="
          curl -LO "https://dl.google.com/android/repository/android-ndk-r23b-linux.zip"
          unzip -q android-ndk-r23b-linux.zip
          
          TOOLCHAIN_DIR="$PWD/android-ndk-r23b/toolchains/llvm/prebuilt/linux-x86_64/bin"
          
          # Символические ссылки для совместимости
          ln -sf $TOOLCHAIN_DIR/aarch64-linux-android21-clang $TOOLCHAIN_DIR/aarch64-linux-android-gcc
          ln -sf $TOOLCHAIN_DIR/aarch64-linux-android21-clang++ $TOOLCHAIN_DIR/aarch64-linux-android-g++
          ln -sf $TOOLCHAIN_DIR/aarch64-linux-android21-clang $TOOLCHAIN_DIR/aarch64-linux-android-ld
          ln -sf $TOOLCHAIN_DIR/aarch64-linux-android21-clang $TOOLCHAIN_DIR/aarch64-linux-android-ar
          
          echo "=== TOOLCHAIN VERIFICATION ==="
          ls -la $TOOLCHAIN_DIR/aarch64-linux-android-* | head -5
          $TOOLCHAIN_DIR/aarch64-linux-android-gcc --version | head -1
          $TOOLCHAIN_DIR/aarch64-linux-android-ld --version | head -1
          
          echo "$TOOLCHAIN_DIR" >> $GITHUB_PATH

      - name: Patch gcc-wrapper for Python 3
        run: |
          echo "=== PATCHING GCC-WRAPPER FOR PYTHON 3 ==="
          if [ -f "scripts/gcc-wrapper.py" ]; then
            sed -i 's/print >> sys.stderr, line/print(line, file=sys.stderr, end="")/g' scripts/gcc-wrapper.py
            sed -i 's/print >> sys.stderr, args[0] + '\'' : '\'' + e.strerror/print(args[0] + '\'' : '\'' + e.strerror, file=sys.stderr)/g' scripts/gcc-wrapper.py
            sed -i 's/print >> sys.stderr, "error, forbidden warning:", m.group(2)/print("error, forbidden warning:", m.group(2), file=sys.stderr)/g' scripts/gcc-wrapper.py
            sed -i 's/line.rstrip('\''\n'\''/line.rstrip(b'\''\n'\'').decode('\''utf-8'\''/g' scripts/gcc-wrapper.py
            echo "✓ Patch applied"
            cat scripts/gcc-wrapper.py
          else
            echo "⚠️ gcc-wrapper.py not found - skipping patch"
          fi

      - name: Clean and prepare kernel source
        run: |
          rm -rf KernelSU
          rm -f .gitmodules
          git config --unset-all submodule.KernelSU.url || true
          git checkout -- fs/notify/fdinfo.c || true
          echo "=== Git status after cleanup ==="
          git status --short

      - name: Integrate KernelSU-Next v1.1.0
        run: |
          curl -LSs "https://raw.githubusercontent.com/KernelSU-Next/KernelSU-Next/v1.1.0/kernel/setup.sh" | bash -s v1.1.0
          echo "=== Git status after KSU integration ==="
          git status --short
          
          # Коммитим изменения, чтобы убрать -dirty
          git add .
          git commit -m "Integrate KernelSU-Next v1.1.0" || true

      - name: Integrate SUSFS patches
        run: |
          echo "=== INTEGRATING SUSFS ==="
          git clone https://gitlab.com/simonpunk/susfs4ksu.git
          cd susfs4ksu && git checkout kernel-4.14 && cd ..
          
          sed 's/[[:space:]]*$//' susfs4ksu/kernel_patches/50_add_susfs_in_kernel-4.14.patch > cleaned.patch
          git apply --reject --ignore-whitespace cleaned.patch || echo "SUSFS patch applied with warnings"
          
          if [ -f "fs/notify/fdinfo.c.rej" ]; then
            echo "Applying manual SUSFS fix..."
            sed -i '/inotify_mark_user_mask.*mask.*);/a\
          } else if (mark->type == FSNOTIFY_MARK_TYPE_SUSFS) {\
            struct susfs_mark *susfs_mark = container_of(mark, struct susfs_mark, fsn_mark);\
            seq_printf(m, "susfs wd:%x ino:%lx sdev:%x mask:%x ",\
                       susfs_mark->wd, mark->inode->i_ino, mark->inode->i_sb->s_dev,\
                       susfs_mark->mask);\
          }' fs/notify/fdinfo.c
            rm -f fs/notify/fdinfo.c.rej
          fi
          
          rm -f cleaned.patch
          echo "=== SUSFS INTEGRATION COMPLETE ==="
          git status --short
          
          # Коммитим изменения, чтобы убрать -dirty
          git add .
          git commit -m "Integrate SUSFS" || true

      - name: Prepare config
        run: |
          echo "=== PREPARING KERNEL CONFIG ==="
          
          # Проверяем toolchain
          echo "=== TOOLCHAIN STATUS ==="
          which aarch64-linux-android-gcc && aarch64-linux-android-gcc --version | head -1
          which aarch64-linux-android-ld && aarch64-linux-android-ld --version | head -1
          
          # Создаём out директорию
          mkdir -p out
          
          # Используем sm8150_defconfig для Snapdragon 855 (Pixel 4XL)
          DEFCONFIG="sm8150_defconfig"
          echo "Using DEFCONFIG: $DEFCONFIG"
          
          # Применяем defconfig
          make O=out ARCH=arm64 CROSS_COMPILE=aarch64-linux-android- $DEFCONFIG || {
            echo "❌ sm8150_defconfig failed, trying fallback configs..."
            make O=out ARCH=arm64 CROSS_COMPILE=aarch64-linux-android- coral_defconfig || make O=out ARCH=arm64 CROSS_COMPILE=aarch64-linux-android- flame_defconfig || make O=out ARCH=arm64 CROSS_COMPILE=aarch64-linux-android- defconfig || exit 1
          }
          
          # Разрешаем все prompts
          echo "=== RESOLVING CONFIG PROMPTS ==="
          yes "" | make O=out ARCH=arm64 CROSS_COMPILE=aarch64-linux-android- oldconfig
          
          # Включаем KSU и SUSFS
          sed -i 's/# CONFIG_KSU is not set/CONFIG_KSU=y/' out/.config || true
          sed -i 's/# CONFIG_SUSFS is not set/CONFIG_SUSFS=y/' out/.config || true
          sed -i 's/# CONFIG_KPROBES is not set/CONFIG_KPROBES=y/' out/.config || true
          sed -i 's/# CONFIG_KPROBE_EVENTS is not set/CONFIG_KPROBE_EVENTS=y/' out/.config || true
          
          # Отключаем CONFIG_LOCALVERSION_AUTO, чтобы убрать git hashes
          sed -i 's/CONFIG_LOCALVERSION_AUTO=y/CONFIG_LOCALVERSION_AUTO=n/' out/.config || echo 'CONFIG_LOCALVERSION_AUTO=n' >> out/.config
          
          # Устанавливаем короткий LOCALVERSION
          sed -i 's/CONFIG_LOCALVERSION=.*/CONFIG_LOCALVERSION=""/' out/.config || echo 'CONFIG_LOCALVERSION=""' >> out/.config
          
          # Повторно разрешаем prompts после изменений
          yes "" | make O=out ARCH=arm64 CROSS_COMPILE=aarch64-linux-android- oldconfig
          
          # Финальная silentoldconfig
          make O=out ARCH=arm64 CROSS_COMPILE=aarch64-linux-android- silentoldconfig
          
          echo "=== CONFIG VERIFICATION ==="
          grep -E "(CONFIG_KSU|CONFIG_SUSFS|CONFIG_KPROBES)" out/.config || echo "⚠️ Some options missing"
          grep CONFIG_LOCALVERSION out/.config

      - name: Build kernel
        run: |
          echo "=== STARTING KERNEL BUILD ==="
          
          # Проверяем окружение
          echo "PATH: $PATH"
          which aarch64-linux-android-gcc || echo "❌ GCC missing"
          
          # Компилируем ядро
          yes "" | make O=out ARCH=arm64 CROSS_COMPILE=aarch64-linux-android- -j$(nproc --all) Image.gz-dtb || exit 1
          
          echo "=== BUILD SUCCESSFUL ==="
          ls -la out/arch/arm64/boot/

      - name: Package with AnyKernel3
        run: |
          git clone https://github.com/osm0sis/AnyKernel3
          cp out/arch/arm64/boot/Image.gz-dtb AnyKernel3/
          cd AnyKernel3
          sed -i 's/device.name1=/device.name1=coral/' anykernel.sh
          sed -i 's/kernel.string=/kernel.string=KernelSU-Next v1.1.0 + SUSFS/' anykernel.sh
          zip -r ../AnyKernel3-KSU-SUSFS.zip *
          cd ..

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: kernel-zip
          path: AnyKernel3-KSU-SUSFS.zip
