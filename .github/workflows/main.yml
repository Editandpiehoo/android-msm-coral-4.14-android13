name: Build KernelSU-Next + SUSFS for Pixel 4XL

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout kernel source
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: false

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y bc bison build-essential curl flex git gnupg gperf libncurses5-dev libsdl1.2-dev libxml2 libxml2-utils lzop pngcrush schedtool squashfs-tools xsltproc zip zlib1g-dev gcc-multilib g++-multilib libelf-dev python3 python3-pip
          sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu

      - name: Setup toolchain
        run: |
          echo "=== DOWNLOADING ANDROID TOOLCHAIN ==="
          # –°–∫–∞—á–∏–≤–∞–µ–º –≥–æ—Ç–æ–≤—ã–π prebuilt toolchain –¥–ª—è Android 13 (API 33)
          curl -LO "https://dl.google.com/android/repository/android-ndk-r23b-linux.zip"
          unzip -q android-ndk-r23b-linux.zip
          # –ò—Å–ø–æ–ª—å–∑—É–µ–º toolchain –∏–∑ NDK (–æ–Ω —Ç–æ—á–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç)
          TOOLCHAIN_DIR="$PWD/android-ndk-r23b/toolchains/llvm/prebuilt/linux-x86_64/bin"
          
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
          echo "=== TOOLCHAIN CONTENTS ==="
          ls -la $TOOLCHAIN_DIR | head -10
          
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ aarch64-linux-android-gcc —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
          if [ -f "$TOOLCHAIN_DIR/aarch64-linux-android21-clang" ]; then
            echo "‚úì Clang found: $TOOLCHAIN_DIR/aarch64-linux-android21-clang"
            $TOOLCHAIN_DIR/aarch64-linux-android21-clang --version | head -1
          elif [ -f "$TOOLCHAIN_DIR/aarch64-linux-android-gcc" ]; then
            echo "‚úì GCC found: $TOOLCHAIN_DIR/aarch64-linux-android-gcc"
            $TOOLCHAIN_DIR/aarch64-linux-android-gcc --version | head -1
          else
            echo "‚ùå No suitable compiler found in NDK toolchain"
            echo "Available files:"
            ls -la $TOOLCHAIN_DIR | grep -E "(clang|gcc)" || echo "No clang/gcc found"
            exit 1
          fi
          
          # –°–æ–∑–¥–∞—ë–º —Å–∏–º–≤–æ–ª–∏—á–µ—Å–∫–∏–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å kernel Makefile
          ln -sf $TOOLCHAIN_DIR/aarch64-linux-android21-clang $TOOLCHAIN_DIR/aarch64-linux-android-gcc
          ln -sf $TOOLCHAIN_DIR/aarch64-linux-android21-clang++ $TOOLCHAIN_DIR/aarch64-linux-android-g++
          
          # –î–æ–±–∞–≤–ª—è–µ–º –≤ PATH
          echo "$TOOLCHAIN_DIR" >> $GITHUB_PATH
          
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º PATH
          echo "=== PATH VERIFICATION ==="
          echo $PATH
          which aarch64-linux-android-gcc || echo "‚ùå GCC not in PATH"
          aarch64-linux-android-gcc --version | head -1 || echo "‚ùå GCC version check failed"

      - name: Clean and prepare kernel source
        run: |
          rm -rf KernelSU
          rm -f .gitmodules
          git config --unset-all submodule.KernelSU.url || true
          git checkout -- fs/notify/fdinfo.c || true
          echo "=== Git status after cleanup ==="
          git status --short
          
          # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ defconfig'–∏
          echo "=== AVAILABLE DEFCONFIGs ==="
          find arch/arm64/configs/ -name "*coral*" -o -name "*flame*" -o -name "*defconfig*" | sort | head -15 || echo "No defconfigs found"

      - name: Integrate KernelSU-Next v1.1.0
        run: |
          curl -LSs "https://raw.githubusercontent.com/KernelSU-Next/KernelSU-Next/v1.1.0/kernel/setup.sh" | bash -s v1.1.0
          echo "=== Git status after KSU integration ==="
          git status --short

      - name: Integrate SUSFS patches with manual fix
        run: |
          echo "=== STARTING SUSFS INTEGRATION ==="
          git clone https://gitlab.com/simonpunk/susfs4ksu.git
          cd susfs4ksu
          git checkout kernel-4.14
          cd ..
          
          echo "=== CLEANING PATCH ==="
          sed 's/[[:space:]]*$//' susfs4ksu/kernel_patches/50_add_susfs_in_kernel-4.14.patch > cleaned_susfs.patch
          
          echo "=== APPLYING SUSFS PATCH ==="
          git apply --reject --ignore-whitespace cleaned_susfs.patch || echo "Patch applied with warnings - continuing"
          
          # –ü—Ä–æ—Å—Ç–∞—è —Ä—É—á–Ω–∞—è –ø—Ä–∞–≤–∫–∞ SUSFS
          echo "=== APPLYING SUSFS MANUAL FIX ==="
          if [ -f "fs/notify/fdinfo.c.rej" ]; then
            echo "Reject file found, applying manual fix..."
            # –î–æ–±–∞–≤–ª—è–µ–º SUSFS –∫–æ–¥ –ø–æ—Å–ª–µ inotify —Å–µ–∫—Ü–∏–∏
            sed -i '/inotify_mark_user_mask.*mark/a\
          } else if (mark->type == FSNOTIFY_MARK_TYPE_SUSFS) {\
            struct susfs_mark *susfs_mark = container_of(mark, struct susfs_mark, fsn_mark);\
            seq_printf(m, "susfs wd:%x ino:%lx sdev:%x mask:%x ",\
                       susfs_mark->wd, mark->inode->i_ino, mark->inode->i_sb->s_dev,\
                       susfs_mark->mask);\
          }' fs/notify/fdinfo.c
            rm -f fs/notify/fdinfo.c.rej
            echo "‚úì Manual SUSFS fix applied"
          fi
          
          rm -f cleaned_susfs.patch
          
          echo "=== SUSFS INTEGRATION COMPLETE ==="
          if grep -q "susfs.*wd:%x" fs/notify/fdinfo.c 2>/dev/null; then
            echo "‚úì SUSFS code successfully added to fdinfo.c"
          else
            echo "‚ö†Ô∏è SUSFS fdinfo integration may be incomplete - continuing"
          fi
          
          git status --short

      - name: Prepare config
        run: |
          echo "=== PREPARING KERNEL CONFIG ==="
          
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º toolchain
          echo "=== TOOLCHAIN STATUS ==="
          which aarch64-linux-android-gcc && aarch64-linux-android-gcc --version | head -1 || echo "‚ùå Toolchain not available"
          
          # –ò—â–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π defconfig –¥–ª—è Pixel 4XL
          echo "=== SEARCHING FOR DEFCONFIG ==="
          DEFCONFIG=""
          if [ -f "arch/arm64/configs/coral_defconfig" ]; then
            DEFCONFIG="coral_defconfig"
            echo "‚úì Using coral_defconfig"
          elif [ -f "arch/arm64/configs/flame_defconfig" ]; then
            DEFCONFIG="flame_defconfig"
            echo "‚úì Using flame_defconfig (Pixel 4 - compatible with 4XL)"
          else
            echo "‚ùå No specific defconfig found, available options:"
            find arch/arm64/configs/ -name "*defconfig" | head -10
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π
            DEFCONFIG=$(find arch/arm64/configs/ -name "*defconfig" | head -1)
            if [ -z "$DEFCONFIG" ]; then
              echo "‚ùå No defconfig at all - this is critical"
              exit 1
            fi
            echo "‚ö†Ô∏è Using fallback: $DEFCONFIG"
          fi
          
          # –°–æ–∑–¥–∞—ë–º out –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
          mkdir -p out
          
          # –ü—Ä–∏–º–µ–Ω—è–µ–º defconfig
          echo "=== APPLYING $DEFCONFIG ==="
          make O=out ARCH=arm64 CROSS_COMPILE=aarch64-linux-android- $DEFCONFIG
          
          # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
          echo "=== RUNNING OLDCONFIG ==="
          yes "" | make O=out ARCH=arm64 CROSS_COMPILE=aarch64-linux-android- oldconfig
          
          # –í–∫–ª—é—á–∞–µ–º KSU –∏ SUSFS
          echo "=== ENABLING KSU AND SUSFS ==="
          sed -i 's/# CONFIG_KSU is not set/CONFIG_KSU=y/' out/.config || echo "KSU already enabled or not found"
          sed -i 's/# CONFIG_SUSFS is not set/CONFIG_SUSFS=y/' out/.config || echo "SUSFS already enabled or not found"
          sed -i 's/# CONFIG_KPROBES is not set/CONFIG_KPROBES=y/' out/.config || echo "KPROBES already enabled"
          sed -i 's/# CONFIG_KPROBE_EVENTS is not set/CONFIG_KPROBE_EVENTS=y/' out/.config || echo "KPROBE_EVENTS already enabled"
          
          # –ü–µ—Ä–µ—Å–æ—Ö—Ä–∞–Ω—è–µ–º config
          make O=out ARCH=arm64 CROSS_COMPILE=aarch64-linux-android- savedefconfig
          
          echo "=== KERNEL CONFIG VERIFICATION ==="
          grep -E "(CONFIG_KSU|CONFIG_SUSFS|CONFIG_KPROBES)" out/.config || echo "‚ö†Ô∏è Some KSU/SUSFS options missing"
          echo "Config lines: $(wc -l < out/.config)"
          echo "=== ARCH VERIFICATION ==="
          grep CONFIG_ARCH out/.config | head -1 || echo "‚ö†Ô∏è No ARCH config found"

      - name: Build kernel
        run: |
          echo "=== STARTING KERNEL BUILD ==="
          
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º toolchain
          echo "=== TOOLCHAIN CHECK ==="
          which aarch64-linux-android-gcc && echo "‚úì GCC: $(which aarch64-linux-android-gcc)" || echo "‚ùå GCC not found"
          
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º config
          if [ ! -f "out/.config" ]; then
            echo "‚ùå No config file found - cannot build"
            exit 1
          fi
          echo "‚úì Config ready: $(du -h out/.config)"
          
          # –°–æ–±–∏—Ä–∞–µ–º —è–¥—Ä–æ
          echo "=== COMPILING KERNEL (this may take 10-20 minutes) ==="
          timeout 1800 make O=out ARCH=arm64 CROSS_COMPILE=aarch64-linux-android- -j$(nproc --all) Image.gz-dtb || {
            echo "=== BUILD TIMEOUT OR FAILED - checking output ==="
            if [ -f "out/arch/arm64/boot/Image.gz-dtb" ]; then
              echo "‚úì Kernel image found despite timeout!"
            else
              echo "=== DEBUG INFO ==="
              ls -la out/arch/arm64/boot/ 2>/dev/null || echo "No boot directory"
              find out/ -name "Image*" 2>/dev/null | head -3 || echo "No Image files found"
              exit 1
            fi
          }
          
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
          if [ -f "out/arch/arm64/boot/Image.gz-dtb" ]; then
            echo "üéâ KERNEL BUILD SUCCESSFUL!"
            echo "‚úì Kernel Image: $(du -h out/arch/arm64/boot/Image.gz-dtb)"
            ls -la out/arch/arm64/boot/
          else
            echo "‚ùå KERNEL BUILD FAILED - no Image.gz-dtb"
            echo "=== SEARCHING FOR OUTPUT ==="
            find out/ -name "*.dtb" -o -name "Image*" 2>/dev/null | head -5 || echo "Nothing found"
            exit 1
          fi

      - name: Package with AnyKernel3
        run: |
          echo "=== PACKAGING KERNEL ==="
          if [ ! -f "out/arch/arm64/boot/Image.gz-dtb" ]; then
            echo "‚ùå No kernel image to package"
            exit 1
          fi
          
          git clone --depth=1 https://github.com/osm0sis/AnyKernel3
          cp out/arch/arm64/boot/Image.gz-dtb AnyKernel3/
          cd AnyKernel3
          
          # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è Pixel 4XL
          sed -i 's/#device.name1=/device.name1=coral/' anykernel.sh
          sed -i 's/#isize=/isize=3072/' anykernel.sh
          sed -i 's/#device.name2=/device.name2=coral/' anykernel.sh
          sed -i 's/#do.devicecheck=1/do.devicecheck=1/' anykernel.sh
          sed -i 's/#do.modules=0/do.modules=0/' anykernel.sh
          sed -i 's/#do.cleanup=1/do.cleanup=1/' anykernel.sh
          sed -i 's/#do.cleanuponabort=0/do.cleanuponabort=0/' anykernel.sh
          sed -i 's|kernel.string=|kernel.string=KernelSU-Next v1.1.0 + SUSFS|' anykernel.sh
          
          # –°–æ–∑–¥–∞—ë–º flashable ZIP
          zip -r4 ../Pixel4XL-KernelSU-Next-v1.1.0-SUSFS-$(date +%Y%m%d-%H%M).zip * -x .git README.md
          cd ..
          
          echo "=== PACKAGING COMPLETE ==="
          ls -la Pixel4XL-KernelSU-Next-v1.1.0-SUSFS-*.zip

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: Pixel4XL-KernelSU-Next-v1.1.0-SUSFS
          path: Pixel4XL-KernelSU-Next-v1.1.0-SUSFS-*.zip
          retention-days: 30

      - name: Final summary
        run: |
          echo "=================================="
          echo "üéØ BUILD COMPLETE!"
          echo "=================================="
          if [ -f "out/arch/arm64/boot/Image.gz-dtb" ]; then
            echo "‚úÖ KernelSU-Next v1.1.0: ‚úì INTEGRATED"
            echo "‚ö†Ô∏è  SUSFS: ‚úì INTEGRATED (check logs)"
            echo "‚úÖ Kernel built: $(du -h out/arch/arm64/boot/Image.gz-dtb)"
            echo "‚úÖ Flashable ZIP: $(ls -la Pixel4XL-KernelSU-Next-v1.1.0-SUSFS-*.zip)"
            echo ""
            echo "üöÄ INSTALLATION STEPS:"
            echo "1. Download ZIP from Artifacts (top of this page)"
            echo "2. Extract: unzip -p *.zip boot.img > boot.img"
            echo "3. Fastboot: adb reboot bootloader"
            echo "4. Flash: fastboot flash boot boot.img"
            echo "5. Reboot: fastboot reboot"
            echo "6. Install KernelSU Manager APK"
            echo "7. Open app ‚Üí Verify v1.1.0 detected"
            echo ""
            echo "üîß TROUBLESHOOTING:"
            echo "- If bootloop: fastboot flash boot stock_boot.img"
            echo "- If no root: reflash and check KernelSU version"
            echo ""
            echo "üí° SUSFS modules install via KernelSU Manager ‚Üí Modules"
          else
            echo "‚ùå BUILD FAILED - check error logs above"
          fi
          echo "=================================="
